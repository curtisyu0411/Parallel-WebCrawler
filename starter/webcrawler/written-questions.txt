Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    Since parallel webcrawler uses multi-threads, it will download more pages than sequential webcrawler. This means more data
    to parse using PageParserImpl. So the parallelWebCrawler take more time to parse the page.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
    Since her old PC may not support multi-threading code. So only one thread is running in parallel webcrawler. Since
    parallel webcrawler use fork-join pool and locks to perform parallel processing, these steps might drag the performance
    down so that sequential web crawler was able to read more web pages than the parallel crawler.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
    When using a computer that support multi-threading, parallel web crawler will perform better than a sequential crawler.
    Since in a given interval, parallel crawler is able to download several pages at the same time which will be faster than the
    sequential web crawler.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
        Logging the method calls that are needed to be recorded.
    (b) What are the join points of the Profiler in the web crawler program?
        The invocation of the methods.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
    1. Abstract factory: PagePaserFactory, PageParser, PageParserFactoryImpl, PageParserImpl.
    Like: Allow different implementation of an interface, depending how to invoke the factory.
    Dislike: Often leads to vague concept and misunderstanding.

    2. Dependency Injection: ParallelWebCrawler and Sequential WebCrawler.
    Like:No need to worry about instantiate new object.
    Dislike:Spend lot resource on configuration.

    3.Dynamic Proxy: Profiler, ProfilerImpl, ProfilerModule, ProfilingMethodInterceptor, ProfilingState
    Like:The result is pretty intuitive, we can see the program runtime state has been recorded.
    Dislike: Never really understand the concept and why we should do that.


